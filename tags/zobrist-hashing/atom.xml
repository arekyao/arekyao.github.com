<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Zobrist hashing | YY Every Day]]></title>
  <link href="http://arekyao.github.io/tags/zobrist-hashing/atom.xml" rel="self"/>
  <link href="http://arekyao.github.io/"/>
  <updated>2014-02-06T12:15:39+08:00</updated>
  <id>http://arekyao.github.io/</id>
  <author>
    <name><![CDATA[Arek.Yao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Key Technologies in Simple XiangQi Engine MaxQi]]></title>
    <link href="http://arekyao.github.io/blog/2013/07/02/the-key-technologies-in-simple-xiangqi-engine-maxqi/"/>
    <updated>2013-07-02T08:30:00+08:00</updated>
    <id>http://arekyao.github.io/blog/2013/07/02/the-key-technologies-in-simple-xiangqi-engine-maxqi</id>
    <content type="html"><![CDATA[<h2 id="mini-max-algorithm">1,mini-max algorithm</h2>

<p>minimize the opponent’s potential max profit.</p>

<p>easy to understand,right?</p>

<h2 id="alpha-beta-cutoff">2,alpha-beta cutoff</h2>

<p>It stops completely evaluating a move when at least one possibility has been found that proves the move to be worse than a previously examined move.  <br />
  <!-- more -->
 Such moves need not be evaluated further. </p>

<p>When applied to a standard minimax tree, it returns the same move as minimax would, but prunes away branches that cannot possibly influence the final decision</p>

<p><code>
function alphabeta(node, depth, a, b, Player)        
    if depth = 0 or node is a terminal node
        return the heuristic value of node
    if Player = MaxPlayer
        for each child of node
            a := max(a, alphabeta(child, depth-1, a, b, not(Player) ))    
            if b &lt;= a
                break                             (* Beta cut-off *)
        return a
    else
        for each child of node
            b := min(b, alphabeta(child, depth-1, a, b, not(Player) ))    
            if b &lt;= a
                break                             (* Alpha cut-off *)
        return b
(* Initial call *)
alphabeta(origin, depth, -infinity, +infinity, MaxPlayer)
</code></p>

<h2 id="quiescence-search">3,Quiescence search</h2>

<p>When have to recapture , it have to search until there is no tradeoff</p>

<h2 id="iterative-search">4,Iterative search</h2>

<p>the key is the search depth.</p>

<p>The efficiency of the alpha-beta search is strongly enhanced (in terms of the number of nodes searched) <br />
if the best move is tried first, and trying idiotic moves first (such as both Queens getting berserk) can easily lead to an explosion of the search.  </p>

<p>Rather than aggressively starting a search of the required depth, proceed carefully and first invest some time doing a search of shallower depth.  </p>

<p>What it can get ,through the shallower depth search , the window (alpha-beta,the min &amp; max) and the best move, which is supposed to search first in deepen search</p>

<h2 id="hash-table">5, Hash table</h2>

<p>Use the result which has been faced last time.</p>

<p>So it is needed some hash key to describe the whole board </p>

<p>The Zobrist Keys show up!</p>

<h2 id="zobrist-hashing">6,Zobrist hashing</h2>

<p>Zobrist hashing starts by randomly generating bitstrings for each possible element of a board game</p>

<p>The final Zobrist hash is computed by combining those bitstrings using bitwise XOR.</p>

<p>the good is the hash key is recalculated by two “xor”</p>

<h2 id="monte-carlo-methods">7,Monte Carlo methods</h2>

<p>This method can be used to estimate the board status(which side is at better thant the other side)</p>

<p>Monte Carlo methods vary, but tend to follow a particular pattern:</p>

<p>a). Define a domain of possible inputs.<br />
  b). Generate inputs randomly from a probability distribution over the domain.<br />
  c). Perform a deterministic computation on the inputs.<br />
  d). Aggregate the results.  </p>

<p>However, in maxqi, it’s not used.<br />
The other way the piece’s weight sum is used to estimate.</p>
]]></content>
  </entry>
  
</feed>
