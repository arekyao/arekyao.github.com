<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TechSpark | YY Every Day]]></title>
  <link href="http://arekyao.github.io/blog/categories/techspark/atom.xml" rel="self"/>
  <link href="http://arekyao.github.io/"/>
  <updated>2013-10-17T12:28:15+08:00</updated>
  <id>http://arekyao.github.io/</id>
  <author>
    <name><![CDATA[Arek.Yao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Something Interesting about AI]]></title>
    <link href="http://arekyao.github.io/blog/2013/04/21/something-interesting-about-ai/"/>
    <updated>2013-04-21T19:53:00+08:00</updated>
    <id>http://arekyao.github.io/blog/2013/04/21/something-interesting-about-ai</id>
    <content type="html"><![CDATA[<ul>
  <li>
    <h2 id="generate-music-algorithmicallyhttpwwwdatabozocom20130412generatingmusicalgorithmicallyhtml"><a href="http://www.databozo.com/2013/04/12/Generating_music_algorithmically.html">Generate Music Algorithmically</a></h2>
  </li>
</ul>

<h3 id="music-feature">Music Feature</h3>

<p>Music is compose by lots of note.<br />
The feature of note is frequece and length.</p>

<h3 id="markov-chain">Markov Chain</h3>

<p>The idea tech of Markov Chain is that, the next state (to us,it’s music note) is decided by the previous N states, only.
<!-- more -->
That means:<br />
the next note’s freq is decided by the previous’s.
the next note’s length is decided by the previous’s.</p>

<h3 id="machine-learning">Machine Learning</h3>

<p>First, learn the trans probability throught lots of music sample.</p>

<p>Then, we got the probability from Freq A to Freq B, From length 1/2 to 1/4</p>

<p>Last, generate note by probability, random. Create music file according to the note data.</p>

<h3 id="code">Code</h3>

<p>The lib “pysynth.py” for gen music through two arg (freq and length)</p>

<p>The key program “MarkovBuilder.py” for TransArray&amp;GenerateNote</p>

<p>```py</p>

<p>’’’
Created on May 14, 2009</p>

<p>@author: darkxanthos
‘’’
import random</p>

<p>class MarkovBuilder:
    def <strong>init</strong>(self, value_list):
        self._values_added = 0
        self._reverse_value_lookup = value_list
        self._value_lookup = {}
        for i in range(0, len(value_list)):
            self._value_lookup[value_list[i]] = i
        #Initialize our adjacency matrix with the initial
        #probabilities for note transitions.
        self._matrix=[[0 for x in range(0,len(value_list))] for i in range(0,len(value_list))]</p>

<pre><code>def add(self, from_value, to_value):
    """Add a path from a note to another note. Re-adding a path between notes will increase the associated weight."""
    value = self._value_lookup
    self._matrix[value[from_value]][value[to_value]] += 1
    self._values_added = self._values_added + 1
    
def next_value(self, from_value):
    value = self._value_lookup[from_value]
    value_counts = self._matrix[value]
    value_index = self.randomly_choose(value_counts)
    if(value_index &lt; 0):
        raise RuntimeError, "Non-existent value selected."
    else:
        return self._reverse_value_lookup[value_index]
        
def randomly_choose(self, choice_counts):
    """Given an array of counts, returns the index that was randomly chosen"""
    counted_sum = 0
    count_sum = sum(choice_counts)
    selected_count = random.randrange(1, count_sum + 1)
    for index in range(0, len(choice_counts)):
        counted_sum += choice_counts[index]
        if(counted_sum &gt;= selected_count):
            return index
    raise RuntimeError, "Impossible value selection made. BAD!"
</code></pre>

<p>```</p>

<p>Main Program “MarkovMusic.py”</p>

<p>```</p>

<p>’’’
Created on May 12, 2009</p>

<p>@author: Justin Bozonier
‘’’
import pysynth
from MarkovBuilder import MarkovBuilder</p>

<p>class MusicMatrix:
    def <strong>init</strong>(self):
        self._previous_note = None
        self._markov = MarkovBuilder([“a”, “a#”, “b”, “c”, “c#”, “d”, “d#”, “e”, “f”, “f#”, “g”, “g#”])
        self._timings = MarkovBuilder([1, 2, 4, 8, 16])</p>

<pre><code>def add(self, to_note):
    """Add a path from a note to another note. Re-adding a path between notes will increase the associated weight."""
    if(self._previous_note is None):
        self._previous_note = to_note
        return
    from_note = self._previous_note
    self._markov.add(from_note[0], to_note[0])
    self._timings.add(from_note[1], to_note[1])
    self._previous_note = to_note
    
def next_note(self, from_note):
    return [self._markov.next_value(from_note[0]), self._timings.next_value(from_note[1])]
</code></pre>

<h1 id="playing-it-comes-next-">Playing it comes next :)</h1>
<p>#test = [[‘c’,4], [‘e’,4], [‘g’,4], [‘c5’,1]]
#pysynth.make_wav(test, fn = “test.wav”)</p>

<p>musicLearner = MusicMatrix()</p>

<h1 id="input-the-melody-of-row-row-row-your-boat">Input the melody of Row, Row, Row Your Boat</h1>
<p># The MusicMatrix will automatically use this to 
# model our own song after it.
musicLearner.add([“c”, 4])
musicLearner.add([“c”, 4])
musicLearner.add([“c”, 4])
musicLearner.add([“d”, 8])
musicLearner.add([“e”, 4])
musicLearner.add([“e”, 4])
musicLearner.add([“d”, 8])
musicLearner.add([“e”, 4])
musicLearner.add([“f”, 8])
musicLearner.add([“g”, 2])</p>

<p>musicLearner.add([“c”, 8])
musicLearner.add([“c”, 8])
musicLearner.add([“c”, 8])</p>

<p>musicLearner.add([“g”, 8])
musicLearner.add([“g”, 8])
musicLearner.add([“g”, 8])</p>

<p>musicLearner.add([“e”, 8])
musicLearner.add([“e”, 8])
musicLearner.add([“e”, 8])</p>

<p>musicLearner.add([“c”, 8])
musicLearner.add([“c”, 8])
musicLearner.add([“c”, 8])</p>

<p>musicLearner.add([“g”, 4])
musicLearner.add([“f”, 8])
musicLearner.add([“e”, 4])
musicLearner.add([“d”, 8])
musicLearner.add([“c”, 2])</p>

<p>random_score = []
current_note = [“c”, 4]
for i in range(0,100):
    print current_note[0] + “, “ + str(current_note[1])
    current_note = musicLearner.next_note(current_note)
    random_score.append(current_note)</p>

<p>pysynth.make_wav(random_score, fn = “first_score.wav”)</p>

<p>```</p>

<p>code src: <br />
<a href="http://github.com/jcbozonier/MarkovMusic/tree/master">http://github.com/jcbozonier/MarkovMusic/tree/master</a></p>

<ul>
  <li>
    <h2 id="ai-snakehttphawsteincompostssnake-aihtml"><a href="http://hawstein.com/posts/snake-ai.html">AI Snake</a></h2>
  </li>
</ul>

<h4 id="strategy-1">Strategy 1</h4>

<p>If Target is the food, choose the shortest path</p>

<h4 id="strategy-2">Strategy 2</h4>

<p>If Target is the tail, choose the longest path</p>

<p>code src:<br />
<a href="">https://github.com/Hawstein/snake-ai</a></p>

<ul>
  <li>
    <h2 id="ai-solves-super-mario-bros-and-other-classic-nes-gameshttpwwwwiredcouknewsarchive2013-0412super-mario-solved"><a href="http://www.wired.co.uk/news/archive/2013-04/12/super-mario-solved">AI ‘solves’ Super Mario Bros. and other classic NES games</a></h2>
  </li>
</ul>

<embed src="http://player.youku.com/player.php/sid/XNTQzMTM1NDky/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash" />

<p><a href="">http://v.youku.com/v_show/id_XNTQzMTM1NDky.html</a></p>

<p><a href="">http://www.cs.cmu.edu/~tom7/mario/mario.pdf</a></p>

]]></content>
  </entry>
  
</feed>
