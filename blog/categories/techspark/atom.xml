<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TechSpark | YY Every Day]]></title>
  <link href="http://arekyao.github.io/blog/categories/techspark/atom.xml" rel="self"/>
  <link href="http://arekyao.github.io/"/>
  <updated>2014-02-05T08:42:59+08:00</updated>
  <id>http://arekyao.github.io/</id>
  <author>
    <name><![CDATA[Arek.Yao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Magnet Searcher Engine, DHT Crawler, P2P Resource Saver]]></title>
    <link href="http://arekyao.github.io/blog/2013/11/17/dht-crawler-p2p-resource-saver/"/>
    <updated>2013-11-17T00:07:00+08:00</updated>
    <id>http://arekyao.github.io/blog/2013/11/17/dht-crawler-p2p-resource-saver</id>
    <content type="html"><![CDATA[<h2 id="preface">1.Preface</h2>

<p>In China, Pirate Party, as hot as The Communist Party, can get some resources like movies, books, tv series, easily and free, without danger because of some reason.</p>

<!-- more -->

<p>And there are too many ways to get them, such as http, ftp, bt, ed2k and too many tools to work in protocol as refer.  However, one of the worst things is how to find the links.  </p>

<p>BT and EMule is the most popular, because it works by p2p tech (peer to peer, a computing or networking distributed application architecture that partitions tasks or workloads among peers)  </p>

<p><a href="http://en.wikipedia.org/wiki/Distributed_hash_table">DHT</a> is more advantaged architecture, very interesting, which has two key feature:</p>

<p>a, distributed, peer to peer<br />
b, decentralized  </p>

<p>decentralized (no boss, democracy) and distributed (every small person involved in the jobs, but the team, the big team is great, beyond your imagination)</p>

<p>Some product list is like this:</p>

<p><a href="http://bt.shousibaocai.com/">磁力搜索</a></p>

<p><a href="http://www.wotorrent.com/">磁力搜索引擎</a></p>

<p><a href="http://cili.so/">磁力搜</a></p>

<h2 id="magnet-searcher-engine">2.Magnet Searcher Engine</h2>

<p>A search engine should have three parts:</p>

<h4 id="a-data">a, data</h4>

<p>The key module, you have to own the magnet links.<br />
Searcher engine, like google, baidu? yep ,one way.  </p>

<p>The greater way is get them by dht crawler which i will give the desciption later.</p>

<h4 id="b-index--weight">b, index &amp; weight</h4>

<p>Making the index, for latter search more quickly.<br />
Give every link some weight, and it will be used in rank</p>

<h4 id="c-search--rank">c, search &amp; rank</h4>

<p>the service for keyword search
rank it 
some post process, like making unique, making some special format better rank, etc</p>

<h2 id="data-module---dht-crawler">3, Data Module - DHT Crawler</h2>

<p>It works in THREE steps: getting id, detail and file</p>

<h4 id="a-get-the-source-id">a, get the source id</h4>

<p>According to DHT procotol, you can pretend a p2p client, get all info by peers’s “get_peers” package</p>

<p>The more code: <a href="https://github.com/arekyao/dht-crawler">https://github.com/arekyao/dht-crawler</a></p>

<p>```python</p>

<p>def handle_query(self, message):
        trans_id = message[“t”]
        query_type = message[“q”]
        args = message[“a”]
        node_id = args[“id”]</p>

<pre><code>    client_host, client_port = self.client_address
    logger.debug("Query message %s from %s:%d, id:%r" % (query_type, client_host, client_port, node_id.encode("hex")))
    
    # Do we know already about this node?
    node = self.server.dht.rt.node_by_id(node_id)
    if not node:
        node = Node(client_host, client_port, node_id)
        logger.debug("We don`t know about %r, add it as new" % (node))
        self.server.dht.rt.update_node(node_id, node)
    else:
        logger.debug("We already know about: %r" % (node))

    node.update_access()

    if query_type == "ping":
        logger.debug("handle query ping")
        node.pong(socket=self.server.socket, trans_id = trans_id, sender_id=self.server.dht.node._id, lock=self.server.send_lock)
    elif query_type == "find_node":
        logger.debug("handle query find_node")
        target = args["target"]
        found_nodes = encode_nodes(self.server.dht.rt.get_close_nodes(target, 8))
        node.found_node(found_nodes, socket=self.server.socket, trans_id = trans_id, sender_id=self.server.dht.node._id, lock=self.server.send_lock)
    elif query_type == "get_peers":
        logger.debug("handle query get_peers")
        logger.error(args)
        logger.error("get_peer_info_hash_crawler:" + args['info_hash'].encode("hex"))
        node.pong(socket=self.server.socket, trans_id = trans_id, sender_id=self.server.dht.node._id, lock=self.server.send_lock)
        return
    elif query_type == "announce_peer":
        logger.debug("handle query announce_peer")
        logger.error(args)
        logger.error("announce_peer_info_hash_crawler:" + args['info_hash'].encode("hex"))
        node.pong(socket=self.server.socket, trans_id = trans_id, sender_id=self.server.dht.node._id, lock=self.server.send_lock)
        return
    else:
        logger.error("Unknown query type: %s" % (query_type))
</code></pre>

<p>```</p>

<h4 id="b-get-the-detail-info-like-whether-availble">b, get the detail info, like whether availble</h4>

<p>Send “announce_peer” package to peers, to announce that:<br />
You wanna the resouce, bla bla</p>

<h4 id="c-get-the-torrent-file-and-the-desciption">c, get the torrent file, and the desciption</h4>

<p>with the infohash, you can easy to get the file by this:</p>

<blockquote>
  <p>“http://torrage.com/torrent/” ++ MagHash ++ “.torrent”<br />
“https://zoink.it/torrent/” ++ MagHash ++ “.torrent”<br />
http://bt.box.n0808.com  </p>
</blockquote>

<p>```bash</p>

<p>awk ‘{
    code=toupper($1);
    head=substr(code,0,2)
    tail=substr(code,39,2)
    print “http://bt.box.n0808.com/”head”/”tail”/”code”.torrent”
}’</p>

<p>```</p>

<p>Yep, you already have the torrent files, decode the files, and you can get more info.</p>

<h2 id="index-module--rank-module">4, Index module &amp; Rank module</h2>

<p>It’s typical search engine modules.<br />
Easy to get lots of infomations on Internet.</p>

<h2 id="about-dht-protocolhttpwwwbittorrentorgbepsbep0005html">5, About <a href="http://www.bittorrent.org/beps/bep_0005.html">DHT protocol</a></h2>

<p>Four Query Operation:</p>

<ul>
  <li>
    <p>ping: check a node alive</p>
  </li>
  <li>
    <p>find_node: find some node</p>
  </li>
  <li>
    <p>get_peers: get some resouce and querying by id</p>
  </li>
  <li>
    <p>announce_peer: announce downloading some resouce.</p>
  </li>
</ul>

<h2 id="reference">Reference</h2>

<ul>
  <li>http://blog.csdn.net/liweisnake/article/details/9207919</li>
  <li>http://codemacro.com/2013/07/02/dhtcrawler2/</li>
  <li>http://gobismoon.blog.163.com/blog/static/5244280220100893055533/</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Something Interesting about AI]]></title>
    <link href="http://arekyao.github.io/blog/2013/04/21/something-interesting-about-ai/"/>
    <updated>2013-04-21T19:53:00+08:00</updated>
    <id>http://arekyao.github.io/blog/2013/04/21/something-interesting-about-ai</id>
    <content type="html"><![CDATA[<ul>
  <li>
    <h2 id="generate-music-algorithmicallyhttpwwwdatabozocom20130412generatingmusicalgorithmicallyhtml"><a href="http://www.databozo.com/2013/04/12/Generating_music_algorithmically.html">Generate Music Algorithmically</a></h2>
  </li>
</ul>

<h3 id="music-feature">Music Feature</h3>

<p>Music is compose by lots of note.<br />
The feature of note is frequece and length.</p>

<h3 id="markov-chain">Markov Chain</h3>

<p>The idea tech of Markov Chain is that, the next state (to us,it’s music note) is decided by the previous N states, only.
<!-- more -->
That means:<br />
the next note’s freq is decided by the previous’s.
the next note’s length is decided by the previous’s.</p>

<h3 id="machine-learning">Machine Learning</h3>

<p>First, learn the trans probability throught lots of music sample.</p>

<p>Then, we got the probability from Freq A to Freq B, From length 1/2 to 1/4</p>

<p>Last, generate note by probability, random. Create music file according to the note data.</p>

<h3 id="code">Code</h3>

<p>The lib “pysynth.py” for gen music through two arg (freq and length)</p>

<p>The key program “MarkovBuilder.py” for TransArray&amp;GenerateNote</p>

<p>```py</p>

<p>’’’
Created on May 14, 2009</p>

<p>@author: darkxanthos
‘’’
import random</p>

<p>class MarkovBuilder:
    def <strong>init</strong>(self, value_list):
        self._values_added = 0
        self._reverse_value_lookup = value_list
        self._value_lookup = {}
        for i in range(0, len(value_list)):
            self._value_lookup[value_list[i]] = i
        #Initialize our adjacency matrix with the initial
        #probabilities for note transitions.
        self._matrix=[[0 for x in range(0,len(value_list))] for i in range(0,len(value_list))]</p>

<pre><code>def add(self, from_value, to_value):
    """Add a path from a note to another note. Re-adding a path between notes will increase the associated weight."""
    value = self._value_lookup
    self._matrix[value[from_value]][value[to_value]] += 1
    self._values_added = self._values_added + 1
    
def next_value(self, from_value):
    value = self._value_lookup[from_value]
    value_counts = self._matrix[value]
    value_index = self.randomly_choose(value_counts)
    if(value_index &lt; 0):
        raise RuntimeError, "Non-existent value selected."
    else:
        return self._reverse_value_lookup[value_index]
        
def randomly_choose(self, choice_counts):
    """Given an array of counts, returns the index that was randomly chosen"""
    counted_sum = 0
    count_sum = sum(choice_counts)
    selected_count = random.randrange(1, count_sum + 1)
    for index in range(0, len(choice_counts)):
        counted_sum += choice_counts[index]
        if(counted_sum &gt;= selected_count):
            return index
    raise RuntimeError, "Impossible value selection made. BAD!"
</code></pre>

<p>```</p>

<p>Main Program “MarkovMusic.py”</p>

<p>```</p>

<p>’’’
Created on May 12, 2009</p>

<p>@author: Justin Bozonier
‘’’
import pysynth
from MarkovBuilder import MarkovBuilder</p>

<p>class MusicMatrix:
    def <strong>init</strong>(self):
        self._previous_note = None
        self._markov = MarkovBuilder([“a”, “a#”, “b”, “c”, “c#”, “d”, “d#”, “e”, “f”, “f#”, “g”, “g#”])
        self._timings = MarkovBuilder([1, 2, 4, 8, 16])</p>

<pre><code>def add(self, to_note):
    """Add a path from a note to another note. Re-adding a path between notes will increase the associated weight."""
    if(self._previous_note is None):
        self._previous_note = to_note
        return
    from_note = self._previous_note
    self._markov.add(from_note[0], to_note[0])
    self._timings.add(from_note[1], to_note[1])
    self._previous_note = to_note
    
def next_note(self, from_note):
    return [self._markov.next_value(from_note[0]), self._timings.next_value(from_note[1])]
</code></pre>

<h1 id="playing-it-comes-next-">Playing it comes next :)</h1>
<p>#test = [[‘c’,4], [‘e’,4], [‘g’,4], [‘c5’,1]]
#pysynth.make_wav(test, fn = “test.wav”)</p>

<p>musicLearner = MusicMatrix()</p>

<h1 id="input-the-melody-of-row-row-row-your-boat">Input the melody of Row, Row, Row Your Boat</h1>
<p># The MusicMatrix will automatically use this to 
# model our own song after it.
musicLearner.add([“c”, 4])
musicLearner.add([“c”, 4])
musicLearner.add([“c”, 4])
musicLearner.add([“d”, 8])
musicLearner.add([“e”, 4])
musicLearner.add([“e”, 4])
musicLearner.add([“d”, 8])
musicLearner.add([“e”, 4])
musicLearner.add([“f”, 8])
musicLearner.add([“g”, 2])</p>

<p>musicLearner.add([“c”, 8])
musicLearner.add([“c”, 8])
musicLearner.add([“c”, 8])</p>

<p>musicLearner.add([“g”, 8])
musicLearner.add([“g”, 8])
musicLearner.add([“g”, 8])</p>

<p>musicLearner.add([“e”, 8])
musicLearner.add([“e”, 8])
musicLearner.add([“e”, 8])</p>

<p>musicLearner.add([“c”, 8])
musicLearner.add([“c”, 8])
musicLearner.add([“c”, 8])</p>

<p>musicLearner.add([“g”, 4])
musicLearner.add([“f”, 8])
musicLearner.add([“e”, 4])
musicLearner.add([“d”, 8])
musicLearner.add([“c”, 2])</p>

<p>random_score = []
current_note = [“c”, 4]
for i in range(0,100):
    print current_note[0] + “, “ + str(current_note[1])
    current_note = musicLearner.next_note(current_note)
    random_score.append(current_note)</p>

<p>pysynth.make_wav(random_score, fn = “first_score.wav”)</p>

<p>```</p>

<p>code src: <br />
<a href="http://github.com/jcbozonier/MarkovMusic/tree/master">http://github.com/jcbozonier/MarkovMusic/tree/master</a></p>

<ul>
  <li>
    <h2 id="ai-snakehttphawsteincompostssnake-aihtml"><a href="http://hawstein.com/posts/snake-ai.html">AI Snake</a></h2>
  </li>
</ul>

<h4 id="strategy-1">Strategy 1</h4>

<p>If Target is the food, choose the shortest path</p>

<h4 id="strategy-2">Strategy 2</h4>

<p>If Target is the tail, choose the longest path</p>

<p>code src:<br />
<a href="">https://github.com/Hawstein/snake-ai</a></p>

<ul>
  <li>
    <h2 id="ai-solves-super-mario-bros-and-other-classic-nes-gameshttpwwwwiredcouknewsarchive2013-0412super-mario-solved"><a href="http://www.wired.co.uk/news/archive/2013-04/12/super-mario-solved">AI ‘solves’ Super Mario Bros. and other classic NES games</a></h2>
  </li>
</ul>

<embed src="http://player.youku.com/player.php/sid/XNTQzMTM1NDky/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash" />

<p><a href="">http://v.youku.com/v_show/id_XNTQzMTM1NDky.html</a></p>

<p><a href="">http://www.cs.cmu.edu/~tom7/mario/mario.pdf</a></p>

]]></content>
  </entry>
  
</feed>
